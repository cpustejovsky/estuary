package main

import (
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/cpustejovsky/estuary/pkg/models"
)

type Notes = []models.Note

func TestPing(t *testing.T) {
	// Initialize a new httptest.ResponseRecorder.
	rr := httptest.NewRecorder()

	// Initialize a new dummy http.Request.
	r, err := http.NewRequest("GET", "/", nil)
	if err != nil {
		t.Fatal(err)
	}

	// Call the ping handler function, passing in the
	// httptest.ResponseRecorder and http.Request.
	ping(rr, r)

	// Call the Result() method on the http.ResponseRecorder to get the
	// http.Response generated by the ping handler.
	rs := rr.Result()

	// We can then examine the http.Response to check that the status code
	// written by the ping handler was 200.
	if rs.StatusCode != http.StatusOK {
		t.Errorf("want %d; got %d", http.StatusOK, rs.StatusCode)
	}

	// And we can check that the response body written by the ping handler
	// equals "OK".
	defer rs.Body.Close()
	body, err := ioutil.ReadAll(rs.Body)
	if err != nil {
		t.Fatal(err)
	}

	if string(body) != "OK" {
		t.Errorf("want body to equal %q", "OK")
	}
}

// func TestNoteRoutesExist(t *testing.T) {
// 	app := newTestApplication(t)
// 	ts := newTestServer(t, app.routes())
// 	tests := []struct {
// 		name     string
// 		urlPath  string
// 		method   string
// 		wantCode int
// 		wantBody []byte
// 	}{
// 		{"Getting Notes", "/api/notes/category/test", "get", http.StatusOK, []byte("Hello")},
// 		{"Posting to Notes", "/api/notes", "post", http.StatusOK, nil},
// 	}

// 	for _, tt := range tests {
// 		t.Run(tt.name, func(t *testing.T) {
// 			code, _, body := ts.method(t, tt.urlPath, tt.method)

// 			if code != tt.wantCode {
// 				t.Errorf("want %d; got %d", tt.wantCode, code)
// 			}

// 			if !bytes.Contains(body, tt.wantBody) {
// 				t.Errorf("want body %s to contain %q", body, tt.wantBody)
// 			}
// 		})
// 	}
// }
